SOJO stands for Simplified Old Java Objects. The goal of the SOJO project is to provide a library to convert object graphs into a specific structure - which could be a CSV representation, JSON, XML, or any other available format - to ease communication with non-Java processes. SOJO manages cycle detection, as well, so complex object graphs can be represented and transmitted. 
The conversions are pluggable, so even custom formats can be used.

In cases, where object orientation and not object orientation must work together, exist the problem of independent mismatched. The SOJO want to do this problem a little bit smaller. 

Supported functionality are for example:

- data interchange to easy communication with non-Java processes: JSON, CSV or XML-RPC
- operations with complex Java-Objects-graphs: copy or clone, compare or traverse complex object graph


SOJO stands for Simplified Old Java Objects. The goal of the SOJO project is to provide a library to convert object graphs into a specific structure - which could be a CSV representation, JSON, XML, or any other available format - to ease communication with non-Java processes. SOJO manages cycle detection, as well, so complex object graphs can be represented and transmitted. 
The conversions are pluggable, so even custom formats can be used.
<br>
In cases, where object orientation and not object orientation must work together, exist the problem of independent mismatched. The SOJO want to do this problem a little bit smaller. 
<br>
Supported functionality are:
<ul>
<li> data interchange to easy communication with non-Java processes:
<br><br><i>
Serializer serializer = new JsonSerializer(); <br>
// XmlRpcSerializer | ObjectSerializer | CsvSerializer<br>
Object result = serializer.serialize(anObject);<br>
Object anObjectCopy = serializer.deserialize(result);<br>
</i><br>

<li> operations with complex Java-Objects-graphs (common / navigation):
<ul>
<li> copy or clone complex object graph (for data transfer objects (DTO), can manage different versions from one object graph (object history))
<br><br><i>
Object anObjectCopy = new ObjectUtil().copy(anObject);
</i><br>
<li> compare complex object graph
<br><i>
boolean equals = ObjectUtil.equals(obj1, obj2);
</i><br>
// for example for the equals method, compare all values<br><i>
public boolean equals(Object obj) {<br>
  return ObjectUtil.equals(obj, this);<br>
}<br><br>

// the complement, the hashCode - method<br>
public int hashCode() {<br>
  return ObjectUtil.hashCode(this);<br>
}<br><br>

// show the first finded different value<br>
CompareResult result = ObjectUtil.compare(obj1, obj2);<br><br>

// show all finded different value<br>
CompareResult result[] = ObjectUtil.compareAll(obj1, obj2);<br><br>

// less, equal, greater (for JavaBeans too)<br>
int compareTo = ObjectUtil.compareTo(obj1, obj2);<br>
</i><br>

<li> Convert objects (respectively object graphs)

</ul>
</ul>

Have fun with SOJO and say, 
where should the way from SOJO go in future? 
<br><br>
Homepage:
http://sojo.sourceforge.net
<br>
Download: 
http://sourceforge.net/project/showfiles.php?group_id=178713




SOJO 0.4.0 released: eine Ergänzung zu POJOs?

Das noch recht junge SOJO-Projekt ist in Version 0.2.0 veröffentlicht worden. Die Intension, die hinter dem SOJO-Projekt steckt, ist ein Java-Framework, das JavaBeans in eine vereinfachte Repräsentation konvertiert. Daraus resultiert ein vereinfachter und besser zu kontrollierender Zugriff auf Properties der JavaBeans. Somit sind Operationen, wie das Vergleichen, Kopieren oder leichtes Navigieren auf komplexen Objektgraphen (auch mit Zyklen) möglich.

Das Ziel des Framework besteht darin, in den Bereichen zu wirken, in denen Java mit nicht "objektorientierten Welten" zusammenarbeiten soll. Besondere Stärken sind dabei Transformationen für den Datenaustausch, wie beispielsweise JSON (JavaScript Object Notation) oder XML. 