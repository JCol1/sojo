Sojo converts Java object graphs into JSON, XML-RPC

Sojo, a young project on SourceForge, allows you to convert Java object graphs into a specific structure (CSV, JSON, XML, etc). It also supports cloning whole graphs, filtering graphs to only retrieve certain properties and traversing the graph.

Sojo, which released version 0.3 earlier this month, was cretaed to help Java communicate with other systems by using intermediate forms for objects. Sojo is pluggable to allow you to create your own conversion format. During the conversion, Sojo performs cycle detection. Other uses for Sojo include:

    * Copy of clone object graphs
    * Compare complex object graphs
    * Traverse object graphs

The Sojo user manual provides code snippets for these activities, including copying an object graph:

    Node node = new Node("Node");  
    Node childNode1 = new Node("Child-Node-1");  
    Node childNode2 = new Node("Child-Node-2"); 
    node.getChilds().add(childNode1); 
    node.getChilds().add(childNode2); 		  

    Node nodeCopy = (Node) new ObjectUtil().copy(node);

JavaLobby has a post showing how to filter object graphs by property.


Hello InfoQ-Team,

I'm the finder from the Open Source project SOJO (http://sojo.sourceforge.net/ - Apache License Version 2.0,).
This is a young project and only few developer are known this project.
I want to write few lines to do the framework popular:


Are Plain Old Java Objects (POJOs) to complex?

POJOs are very importend for the development. 
With POJOs you can develop object orientated and independent from often changed technologies.

But what is with cases, where Java must communicate with "other worlds". 
Other worlds are interfaces, where object orientation is not supported or is not the best decision. 

Supported functionality (now or in the future):

# data interchange (interchange) to easy communication with non-Java processes:

    * JSON (JavaScript Object Notation) a lightweight data-interchange format
    * Object To XML - where is XML-RPC a special case
    * Java serialization, without implements the interface java.io.Serializable (e.g. cluster, cache, remote communication, ...)
    * Comma Separated Values (CSV)
    
# operations with complex Java-Objects-graphs (common / navigation):

    * copy or clone complex object graph (can manage different versions from one object graph (object history))
    * compare complex object graph
    * walk over object graph (to traverse)
    * easy navigate on the complex object graph (with a navigation language)
    * mapping from one property to other property (name to name mapping (by naming conflicts) or value to value mapping (to convert values))
    * making object-values immutable, for testing concurrent access - multi threading)
    * extend objects to additional information (e.g.: object-versions (number of changes), data changed date or changed user)
    
SOJO stands for Simplify your Old Java Objects or, in noun form, Simplify Old Java Objects.

The intention for this project is a Java framework, that convert JavaBeans in a simplified representation. 
So it is easy and uniformly to handle and control the access to JavaBeans properties.

The goal of the SOJO project is to provide a library to convert object graphs into a specific structure (manages cycle detection, as well). 
The framework provide a "pluggable" basis to integrate different kind of conversions (so even custom formats can be used). 
With this infrastructure can solve problems, where POJOs are not supported or not the best decision.     

The SOJO framework has no dependencies to external libraries and can use with Java 1.4 or greater.



Thanks for your time,
Mario