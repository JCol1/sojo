The Open Source project Sojo has announced the next release (version 0.5.0). 
The intention for this project is a Java framework, that convert JavaBeans in a simplified representation . 
So it is easy and uniformly to handle and control the access to JavaBeans properties. 
This framework want to complement POJOs, where Java communicate with "other worlds. Other worlds are interfaces, 
where object orientation is not supported or is not the best decision.

For example:
# data interchange (interchange):

    * JSON (JavaScript Object Notation) a lightweight data-interchange format
    * Object To XML - where is XML-RPC a special case
    * Comma Separated Values (CSV)
    * Java serialization, without implements the interface java.io.Serializable (e.g. cluster, cache, remote communication, ...)

# operation of complex Java-Objects-graphs (common / navigation):

    * copy or clone complex object graph (can manage different versions from one object graph (object history))
    * compare complex object graph
    * walk over object graph (to traverse)
    * extend objects to additional information (e.g.: object-versions (number of changes), data changed date or changed user)
    * easy navigate on the complex object graph (with a navigation language)
    * mapping from one property to other property (name to name mapping (by naming conflicts) or value to value mapping (to convert values))
    * making object-values immutable, for testing concurrent access - multi threading)



In cases, where object orientation and not object orientation must work together, exist the problem of independent mismatched. 
The SOJO want to do this problem a little bit smaller. 

The main Feature:
- Sort List, Set, Map and Array there contains JavaBeans (Feature Request: 1673100)
- Support for filtering by equals, hashCode and compare (Feature Request: 1692337)
- Support for regexp by filtering (Feature Request: 1706577)


The main Bug fixes:
- Can't create a new instance of StackTraceElement in Java 5 (Bug: 1678348).
- Classloaders issue: In muliple classloaders environment (like application container) it would be nice if Sojo could be loaded by parent classloader of classloader of the application. Solution: Replacing Class.forName(className) with Class.forName(className, true, Thread.currentThread().getContextClassloader()) (Bug: 1686733, thanks  B. Hunt).
- Deserialization of JSON object breaks on valid unicode char (Bug: 1686652, thanks  B. Hunt).
- Deserialization of JSON object breaks on Timestamp (Bug: 1688969, thanks  B. Hunt).
- Methods: equals and compare are breaking (Bug: 1692340).
- JsonSerializer not Thread Safe. JsonSerializer.deserialize cannot be used in a Thread safe way, since the method delegates calls to satic parser JsonParserGenerate. A better way would be to generate the JsonParserGenerate with STATIC=false and use one Parser per JsonSerializer (Bug: 1694100, thanks T. Huhtanen).
- Repeated call of JSONSerializer with different value (Bug: 1705249, thanks T. Nagy).


Homepage:

http://sojo.sourceforge.net

Download: 

http://sourceforge.net/project/showfiles.php?group_id=178713
